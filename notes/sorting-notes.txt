2/25/15
sorting
	selection sort- select nth smallest and swap w nth location
	insertion- insert nth smallest so far into sublist of size n


MERGE SORT

mergesort (deck) {
if (size(deck) == 1) {
return deck;
} else {
 	A = first half of deck;
	B = second half of deck;
	R1 = mergesort (A);
	R2 = mergesort (B);
	merge (R1, R2);
}
}

A B sorted low to high
ArrayList<integer>
merge (ArrayList<integerA>, ArrayList<integerB>)

3/4/15
isort & ssort time is n^2 (bc need to loop thru twice)
linear search time  is n
binary search time is lg n

mergesort --> each split loops thru array, taking n time
	  n(lg n)

Big O Notation
    a function f(n) is said to be Og(n) (order g(n) or n ig-Og(n))
if there exists some constant k such that k(g(n)) > f(n) over the long term


