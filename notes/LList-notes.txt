3/11/15

Linked List- comprised of elements(nodes),a set of nodes and a way to get to the "start" node
	node-contains some data/info on how to get to the next node

public class Node {
	private String data;
	private Node next;

	public Node(String s){
		data = s;
	}

	public void setData(String s){
		data = s;
	}

	public String getData() {
		return data;
	}

	public void setNext(Node n) {
		return next;
	}

	public String toString(){
		return data;
	}
}

---

public class Driver {

	public static main void(String[] args) {
		Node n = new Node("hello");
		//System.out.println(n);

		Node n2 = new Node("world");
		//System.out.println(n2);

		n.setNext(n2);
		System.out.println(n.getNext().getData()); //prints out world
		System.out.println(n.getNext()); 

		n.getNext.setData("pickle");
		System.out.println(n2); //prints out pickle
		System.out.println(n.getNext().getData());

		n2.setData("watermelon");
		System.out.println(n.getNext().getData());

		n2.setNext(new Node("abc")); //create new node "abc"
		System.out.println(n.getNext().getNext().getData()); //prints "abc"
		
		n.getNext().getNext().setNext(new Node("yabba"));

		Node tmp = new Node ("start"); //sets tmp as first node
		tmp.setNext(n);
		n = tmp; //makes n refer to start of list

		//prints out entire linked list
		tmp = n;
		while (tmp != null){
			System.out.println(tmp);
			tmp = tmp.getNext();
		}

		//OR

		for (tmp = n; tmp != null; tmp = tmp.getNext()){
			System.out.println(tmp);
		}
	}

}

**
node tmp = n;
while tmp != null
 	tmp = tmp.getNext();
***

3/12/15
----
public class LList {
	private Node l = null;

	public void add(String s){
		l.setNext(new Node(s));	
		l.setNext(null);
	}

	public String toString(){
		String s = "";
		Node tmp;
		for (tmp = l; tmp != null; tmp = tmp.getNext()){
			s = s + tmp + "-->";
		}
		s = s + "null";
		return s;
	}
}

----------------------
3/17/15
1) empty list has a dummy node
2) keep track of length in an instance variable
	add(string) ==> still add at front
	add(index, String) 
3) find --> get
4) remove(index)

-------------------------

3/18/15- removing a node
public String remove(int n){
	if (n >= this.len || n < 0){
		return;
	node T = L;
	for (int i = 0; i < n-1; i++){
		T = T.getNext();
	}
	String s = T.getNext().getData();
	T.setNext(T.getNext().getNext());
	return s;
}

1) make arrayList of n
	random ints between 1-10
	use loop and get to sum all values
2) do same w llist
3) do same w built in llist













